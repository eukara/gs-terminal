imap <silent> <ESC>[1;0P~    <C-R>=GSHandlePaste('i')<CR>
noremap <silent> <ESC>[1;0P~ :call GSHandlePaste('n')<CR>
vmap <silent> <ESC>[1;0P~    :call GSHandlePaste('v')<CR>

set title

let g:last_vim_mode = '_'

if &term == "gsterm"
  set t_ts=]0;
  set t_fs=
  set ttymouse=sgr

	map <Esc>[<64;1;1m  <ScrollWheelUp>
	map! <Esc>[<64;1;1m <ScrollWheelUp>
	map <Esc>[<65;1;1m  <ScrollWheelDown>
	map! <Esc>[<65;1;1m <ScrollWheelDown>
endif

function! GSHandlePaste(m)
  let pf = expand("$VIMGS_PASTE_FILE")
  let txt = join(readfile(pf, "b"), "\n")
  set paste

  if a:m == 'n' 
    call setreg('"', txt)
    normal gP
  elseif a:m == 'v'
    call setreg('"', txt)
    normal gvp
  else
    return txt
  endif
endfunction

vnoremap <silent> <ESC>[1;0C~ y: call GSHandleCopy()<CR>
vnoremap <silent> <ESC>[1;0X~ d: call GSHandleCopy()<CR>
vnoremap <silent> <ESC>[1;0S~ y: call GSHandleSelection()<CR>

augroup vimgsevents
  au! SafeState * call GSChangeMode()
  au! BufEnter * call GSBufEnter()
augroup END

function! GSHandleSelection()
  let cf = expand("$VIMGS_COPY_FILE")
  let txt = getreg("@*")
  call writefile([txt], cf, "b")
  call writefile(["]X;SEL"], "/dev/stderr", "b")
endfunction

function! GSBufEnter()
  let p = expand("%:p")
  call writefile(["]X;PATH-".p.""], "/dev/stderr", "b")
endfunction

function! GSChangeMode()
  set nopaste
  let m = mode()
  if (g:last_vim_mode != m)
    call writefile(["]X;MODE-".m.""], "/dev/stderr", "b")
    let g:last_vim_mode = m
  endif
endfunction

function! GSHandleSelection()
  let cf = expand("$VIMGS_COPY_FILE")
  let txt = getreg("@*")
  call writefile([txt], cf, "b")
  call writefile(["]X;SELECTION"], "/dev/stderr", "b")
  normal gv
endfunction

function! GSHandleCopy()
  let cf = expand("$VIMGS_COPY_FILE")
  let txt = getreg("@*")
  call writefile([txt], cf, "b")
  call writefile(["]X;COPY"], "/dev/stderr", "b")
  normal gv
endfunction
